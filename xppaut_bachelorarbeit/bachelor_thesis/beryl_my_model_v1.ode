Initial s=1 v=0.5 x=0.9
Parameter a=0.5 b=0.9 k=1 L=0.24 m=0.7 Y=0.6 N=0.4 p=0.3 z=0.1 w=1

#b = 0.9 gave us the hopf

s'= -b*s*v+ k*(1-x)-k*s
v'= b*s*v-v*(L+k)
x'= -m*x*Y*(1-x+N+p)/((x+z+a*v)+Y*(1-x+N+p))+m*w*(1-x)*(x+z+a*v)/(w*(x+z+a*v)+(1-x+N+P))

@dt=.5, total=100
@xmin=-1, xmax=100, ymin=-1, ymax=100
@xlo=-1, ylo=-1, xhi=2, yhi=2
done


# You first load your equations into xpp
# To see any diagrams you can click on initial condition go or parameters go
# To do bifurcation analysis click on sing pts-go-print eigen values-yes-import(For Hopf Bifurcation Equilibria should be stable, you can play with parameter values or initial conditions to ensure this).
# Next click on File-Auto(Auto is the Bifurcation package)
# You can set the bifurcation parameters you want to use(I tried using b as the first parameter) change numerics if you want to. Then run-steady state 
# You can then use grab to show you which type of special points you have(in this case I got EP and BP but you can always get others depending on the bifurcatoion parameters you choose)
# If you get a HB you cna go to run-periodic and it will give you a nice Hopf Bifurcation diagram
# BP is also a bifurcation point but you have to figure out which type it is

#a = a
#b = beta
#k = b
#L = alpha
#m = mu
#Y = thetaY
#N = ny
#p = Omega
#z = nx 
#w = thetaX

#how to get hopf point:
#i g
#s g import
#f a 
#einfach laufen lassen mit a, b (run:steady)
#danach nochmal laufen lassen mit b,b

